# BASH REFERENCE

## vi
dG, yG, cG
    delete, yank, and change to end of file  
dgg, ygg, cgg 
    delete, yank, and change to beginning of file
:argd file
	delete file from argument list
:arge[dit] file
	add file to the argument list and edits it
:args file1 file2 ...
	load the given list of files for editing
:e!
	reload the original file
:options
	open window showing all vim options
:hid[e]
	close the current window
^W^W
	switch to next window
/<up-arrow> :<up-arrow>
		allows you to recall previous searches and commands
*
		search for (and highlights) the word under the cursor
:%s///c
		substitute on all lines (%) with confirmation (c)
:w 
		Save current file.
:w <file>
		Save a copy of current file with name <file>. 
		(Doesn't change name of current file)
:saveas <file>
		Save current file as <file>
:edit <file>
		Open new file to edit
:next 
		Go to next in list of files (entered on command line)
:prev
		Go to previous ...
<Ctrl-6>
		Switch between current/prev file
D 		
    Delete from cursor to end of line

## info
t	go to top node (menu page)
b	beginning of node (top of page)
n 	Go to next node
p 	Go to previous node
^x o 	Move to next window
^X 0 	Delete current window
^X 1 	Delete all windows except current window
? 	Lists a summary of commands

## echo
echo -e "\033c"
	clears the screen
-e
    enable interpretation of backslash escape characters
option -n
		suppress trailing newline

## grep
-i	ignore case
-n	print line number of matching lines
-v 	invert pattern, i.e. show non-matching lines
-c	print count of matching lines
-q		quiet mode. supresses normal output

## less
-,--	set command line options from inside less
:e, E
	open new file for examining
:n, :p, :x
	view next, previous, first file in list
:d
	remove current file from list of files

## tr
tr -s '<charlist>' 
	convert multiple occurrences of characters in <charlist> 
	to single occurrences
tr -d '<char>'
	delete all occurences of <char> from input

## cat
-e: 	shows control chars (e.g. ^M) and $ at EOL. 
		shows if a text file is DOS or UNIX format.
-A		like -e but shows tabs as ^I

## diff
-s	report when files are the same
-y	two column output
-q:	quiet mode. display only if files differ

## ls
-1
	-single column output
-p
	-adds only / after directories
--indicator-style=none
	-no indicator after filename
-d	list directory entries instead of contents, likewise with symbolic links
-p	add terminal backslash to directory listings
-Q	enclose entries in double quotes
-H	When a symbolic link points to a directory, follow the link
-L  dereference symbolic links. Shows info about file it points
    to, and not about link itself

## stat.h
sys/stat.h - located in /usr/include/sys

## ln
ln -s TARGET LINKNAME

## sed
-s	consider files separate instead of one continuous stream
-i	modify files in place
sed -f FILE
	specifies a script file
sed -n
	suppress automatic printing of pattern space

## uniq
-d	only print duplicate lines

## cp
-s	create symbolic link instead of copying file

## wc
-L:	print length of longest line

## sort
-o FILE
	send output to file instead of stdout
-d 	sort in dictionary order. only consider alphanumerics and blanks
-r	reverse order sort
-c	check for sorted input. do not sort
-u	like uniq. collapse repeated lines

## rm
-r,-R 	remove directories and their contents recursively

## find
find . -name "H VII*.wav" -print0 | xargs -0 -i cp '{}' '{}'.bak
find . -maxdepth 1 -type d
    list directories only
find . -mindepth 1 -type d -printf '%f\0' | xargs -0 -i'{}' mv '{}'/'{}'.jpg '{}'/Folder.jpg
CONVERTS:
1971-Budgie/1971-Budgie.jpg
INTO: 
1971-Budgie/Folder.jpg

## make
TARGET: PREREQUISITES
	RECIPE

## git
git -f <branch> <starting-point>
	- Reset <branch> to <starting-point>
git merge --abort
	- abort the merge after conflicts
git merge --continue
	- continue merge after conflicts
	-create new branch and then switch to it
git checkout -b <new-branch>
	-list the last N commits
git log -N
	-remove files from index but not working tree (directory)
git rm --cached <files>
	-show commit history
git log
    - to show files in master branch
git ls-tree --name-only master
    - to merge gh-pages into master
git checkout master
git merge gh-pages
    - to optionally delete gh-pages
git branch -D gh-pages
    - to add new repository to github
    (first create new repo on github)
mkdir PROJECTDIR
cp PROJECTFILES PROJECTDIR
cd PROJECTDIR
git init
git add .
git commit -m ...
git remote add {REPONAME|NICKNAME} https://gitgub.com/USERNAME/REPONAME
git push {REPONAME|NICKNAME} master
    - to create a github pages branch
    (first rename main page to index.html)
git branch gh-pages
git checkout gh-pages
git push REMOTE gh-pages
    - to show names/URLs of all remotes stored in project
git remote -v
    - to update, commit, and push a project
git add (FILE(s)|.)
git commit -m "MESSAGE"
git push (<remote>|origin) master

## set
unset
	-unset environment variable
set [args1...] -- [args2...]
		any args after -- are interpreted literally, even if they 
		begin with -. prevents any of args2 to be taken as an option

## zcat
zcat
	-like cat for zipped files

## export
export -n variable
		causes the variable to be removed from export list

